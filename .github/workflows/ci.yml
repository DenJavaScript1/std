name: ci

on:
  push:
    branches: [main, wasm-bindgen-wip]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # TODO(ry): reenable canary when on-going builds in deno repo do not
        # result in red builds in std.
        deno: [1.x] # [1.x, canary]
        os: [macOS-latest, ubuntu-latest, windows-2019]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0
        with:
          deno-version: ${{ matrix.deno }}

      - name: Run tests
        run: deno test --unstable --allow-all

      - name: Generate lcov
        run: deno coverage --unstable --lcov ./cov > cov.lcov

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.deno }}
          files: cov.lcov

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0

      - name: Format
        run: deno fmt --check

      - name: Lint
        run: deno lint

  hash-wasm:
    name: "hash/_wasm/"
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          submodules: false
          # required to push changes
          persist-credentials: true
          # required to identify changed files
          fetch-depth: 2

      - name: Check for changes to hash/_wasm/
        id: source
        run: |-
          declare modified="$([[ "$(git diff --name-only HEAD~ -- ./hash/_wasm/)" ]] && echo true || echo false)"
          echo "::set-output name=modified::${modified}"
          echo "Hash source modified in this commit? ${modified}"

      - name: Set up Deno
        uses: denoland/setup-deno@v1.0.0
        if: success() && steps.source.outputs.modified == 'true'

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        if: success() && steps.source.outputs.modified == 'true'
        with:
          # This must match the version in hash/_wasm/rust-toolchain:
          rust-version: 1.53.0
          targets: wasm32-unknown-unknown

      - name: Set up wasm-bindgen-cli
        run: |-
          # This must match the version in hash/_wasm/Cargo.lock:
          cargo install -f wasm-bindgen-cli --version 0.2.74
        if: success() && steps.source.outputs.modified == 'true'

      - name: Rebuild WASM
        id: build
        if: success() && steps.source.outputs.modified == 'true'
        run: |-
          ./hash/_wasm/build.ts

          declare modified="$([[ "$(git status --porcelain)" ]] && echo true || echo false)"
          echo "::set-output name=modified::${modified}"
          echo "Generated code modified? ${modified}"

      - name: Re-test hash/
        run: deno test --unstable --allow-all ./hash
        if: success() && steps.build.outputs.modified == 'true'

      - name: Push changes
        if: success() && steps.build.outputs.modified == 'true'
        run: |
          declare br="
          "
          declare branch="$(echo ${GITHUB_REF#refs/heads/})"
          declare date="$(git log -1 --pretty=format:'%ad')"
          declare author_name="$(git log -1 --pretty=format:'%an')"
          declare author_email="$(git log -1 --pretty=format:'%ae')"
          declare current_action_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}"

          export GIT_AUTHOR_DATE="${date}"
          export GIT_AUTHOR_NAME="${author_name}"
          export GIT_AUTHOR_EMAIL="${author_email}"

          export GIT_COMMITTER_DATE="${date}"
          export GIT_COMMITTER_NAME="github-actions"
          export GIT_COMMITTER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"

          git remote rm origin
          git remote add origin "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git checkout "${branch}"

          git add .
          git commit -m "chore(hash): rebuild wasm${br}${br}${current_action_url}"
          git push --set-upstream origin "${branch}"
